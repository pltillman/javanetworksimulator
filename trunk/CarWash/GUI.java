import java.rmi.*;
import java.rmi.server.*;

/**
 *
 * @author Patrick Tillman, Brandon Parker, Ryan Spencer
 */
public class GUI extends UnicastRemoteObject implements GUIInterface {

    private String washOutput, attendantOutput;
    private int bay1Status, bay2Status, bay3Status, bay4Status, carMax, carInterval;
    private Boolean ready;

    /**
     * Default constructor for GUI object
     *
     * @throws java.rmi.RemoteException
     */
    public GUI() throws RemoteException {
        super();
        bay1Status = 0;
        ready = false;

    }
    /**
     * Sets the GUI output from the attendant
     *
     * @param f - String - Messages passed from the attendant to the GUI
     * @throws java.rmi.RemoteException
     */
    public void generateAttendantOutput(String f) throws RemoteException {
        this.attendantOutput = f;
    }
    /**
     * Sets the GUI outut from the wash bay
     *
     * @param f - String - Messages passed from the wash bay to the GUI
     * @throws java.rmi.RemoteException
     */
    public void generateWashOutput(String f) throws RemoteException {
        this.washOutput = f;
    }
    /**
     * Sets the ready status for the GUI
     *
     * @param f - Boolean - Indicates whether or not the GUI is ready to display data
     * @throws java.rmi.RemoteException
     */
    public void setReady(Boolean f) throws RemoteException {
        this.ready = f;
    }
    /**
     * Returns the ready status for the GUI
     *
     * @return - Boolean - Indicates whether or not the GUI is ready to display data
     * @throws java.rmi.RemoteException
     */
    public Boolean getReady() throws RemoteException {
        return this.ready;
    }
    /**
     * Sets the total number of cars to be generated by the car generator
     *
     * @param i - int - Represents total number of cars to be generated
     * @throws java.rmi.RemoteException
     */
    public void setCarMax(int i) throws RemoteException {
        this.carMax = i;
    }
    /**
     * Sets the car generator interval time
     *
     * @param i - int - Time between generating cars
     * @throws java.rmi.RemoteException
     */
    public void setCarInterval(int i) throws RemoteException {
        this.carInterval = i;
    }
    /**
     * Gets the total number of cars to be generated by the car generator
     *
     * @return - int - Represents total number of cars to be generated
     * @throws java.rmi.RemoteException
     */
    public int getCarMax() throws RemoteException {
        return this.carMax;
    }
    /**
     * Returns the car generator interval time
     *
     * @return - int - Time between generating cars
     * @throws java.rmi.RemoteException
     */
    public int getCarInterval() throws RemoteException {
        return this.carInterval;
    }
    /**
     * Sets the bay status of the specifed bay
     * @param i - int
     *          = 0 - Ready
     *          = 1 - Washing
     * @param j - int - Bay id
     * @throws java.rmi.RemoteException
     */
    public void setBayStatus(int i, int j) throws RemoteException {
        if (i == 1 || i == 2) {
            switch (j) {
                case 1:
                    this.bay1Status = i;
                    break;
                case 2:
                    this.bay2Status = i;
                    break;
                case 3:
                    this.bay3Status = i;
                    break;
                case 4:
                    this.bay4Status = i;
                    break;
                default:
                    System.out.println("invalid bay id");
            }
        } else {
            System.out.println("Invalid status");
        }
    }

    /**
     * Returns the status of the specified wash bay
     *
     * @param j - int - Bay id
     * @return - Boolean - status of wash bay
     * @throws java.rmi.RemoteException
     */
    public int getBayStatus(int j) throws RemoteException {
        switch (j) {
            case 1:
                return this.bay1Status;
            case 2:
                return this.bay2Status;
            case 3:
                return this.bay3Status;
            case 4:
                return this.bay4Status;
            default:
                System.out.println("invalid bay id");
                return -1;
        }
    }


}
